(function () {

	var FirebaseWrapper, firebaseConstructor, allListKeys;

	Ractive.adaptors.Firebase = {
		filter: function ( object ) {
			// we can't do object instanceof Firebase because Firebase is just an alias for the
			// real constructor... fortunately the constructor is exposed as firebase.constructor
			if ( !firebaseConstructor ) {
				firebaseConstructor = new Firebase( 'https://hzkx4qtevbg.firebaseio-demo.com/' ).constructor;

				Ractive.adaptors.Firebase.filter = function ( ractive, object ) {
					return object instanceof firebaseConstructor;
				};
			}

			return Ractive.adaptors.Firebase.filter( ractive, object );
		},
		wrap: function ( ractive, firebase, keypath, prefixer ) {
			return new FirebaseWrapper( ractive, firebase, keypath, prefixer );
		}
	};

	FirebaseWrapper = function ( ractive, firebase, keypath, prefixer ) {
		var wrapper = this;

		this.firebase = firebase;

		// TODO smart handling of child changes
		firebase.on( 'value', this.changeHandler = function ( snapshot ) {
			var value = snapshot.val(), array, len, i;

			// Should we treat this as a list?
			if ( value && typeof value === 'object' ) {
				keys = Object.keys( value );

				if ( allListKeys( keys ) ) {
					
					// Yes, it's a list
					keys.sort();

					array = [];

					len = keys.length;
					for ( i=0; i<len; i+=1 ) {
						array[i] = value[ keys[i] ];
					}

					value = array;
				}
			}

			wrapper.value = value;

			wrapper.setting = true;
			ractive.set( keypath, value );
			wrapper.setting = false;
		});
	};

	FirebaseWrapper.prototype = {
		teardown: function () {
			console.log( 'tearing down' );
			this.firebase.off( 'value', this.changeHandler );
		},
		get: function () {
			return this.value;
		},
		set: function ( keypath, value ) {	
			if ( this.setting ) {
				return;	
			}

			// TODO...
		},
		reset: function ( value ) {
			this.firebase.set( value );
		}
	};


	allListKeys = function ( keys ) {
		var i = keys.length, key;

		while ( i-- ) {
			key = keys[i];

			if ( ( key.charAt( 0 ) !== '-' ) || ( key.length !== 20 ) ) {
				return false;
			}
		}

		return true;
	};

}());