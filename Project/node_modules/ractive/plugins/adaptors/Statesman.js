(function () {

	var StatesmanWrapper;

	Ractive.adaptors.Statesman = {
		filter: function ( object ) {
			return object instanceof Statesman;
		},
		wrap: function ( ractive, model, keypath, prefix ) {
			return new StatesmanWrapper( ractive, model, keypath, prefix );
		}
	};

	StatesmanWrapper = function ( ractive, model, keypath, prefix ) {
		this.value = model;

		model.on( 'change', this.changeHandler = function ( changes ) {
			ractive.set( prefix( changes ) );
		});
	};

	StatesmanWrapper.prototype = {
		teardown: function () {
			this.changeHandler.cancel();
		},
		get: function () {
			return this.value.get();
		},
		set: function ( keypath, value ) {
			this.value.set( keypath, value );
		},
		reset: function ( object ) {
			// If the object is a Statesman instance, or it's not an object at all,
			// assume this one is being retired
			if ( object instanceof Statesman || typeof object !== 'object' ) {
				return false;
			}

			// Otherwise if this is a POJO, reset the model
			this.value.reset( object );
		}
	};

}());